1) //Using Hash Map TC: O(nlogn)

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int k=1;
        int n=nums.length;
        for(int i=0;i<nums.length;i++){
            map.put(nums[i], (map.getOrDefault(nums[i], 0) + 1));
        }
        n=n/2;
        for(Map.Entry<Integer,Integer> e : map.entrySet()){
            if(e.getValue()>n){
                return e.getKey();
            }
        }
        return 0;
    }
}
2) using moore voting algo 

assuming majority elem always exists
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int element=0;

        for(int i=0;i<nums.length;i++){
            if(count==0){
                count =1;
                element = nums[i];
            }
            else if(element != nums[i]){
                count--;
            }
            else if(element == nums[i]){
                count ++;
            }
        }
        return element;
        //return 0;
    }
