1) Brute force O(n2)

class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0;i<n;i++){
            boolean leader = true;
            for(int j=i+1 ; j<n;j++){
                if(arr[j]>arr[i]){
                    leader = false;
                    break;
                }
            }
            if(leader){
                    ans.add(arr[i]);
                }
        }
        return ans;
    }
}
2) optimal 


class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
        ArrayList<Integer> ans = new ArrayList<Integer>();
        ans.add(arr[n-1]);
        int max = arr[n-1];
        
        for(int i=n-2; i>= 0; i--){
            if(arr[i]>=max){
                ans.add(arr[i]);
                max = arr[i];
            }
            
        }
        Collections.sort(ans,Collections.reverseOrder());
        
        return ans;
    }
}
