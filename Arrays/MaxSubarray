//Brute Force O(n2)
class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int sum;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum=0;
            for(int j=i;j<n;j++){

                sum = sum + nums[j];
                max= Math.max(max,sum);

            }
        }
        return max;
    }
}

// Optimal -> Kadane Algo O(n)
class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int sum =0;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum =sum+nums[i];
            max= Math.max(max,sum);
            if(sum<0){
                sum=0;
            }
        }
        return max;
    }
}
